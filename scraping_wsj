from selenium import webdriver

import os

from selenium.webdriver.common.by import By

from selenium.webdriver.support.ui import WebDriverWait

from selenium.webdriver.support import expected_conditions as EC

import gspread

from oauth2client.service_account import ServiceAccountCredentials

import string

from datetime import datetime




#clock

startTime = datetime.now()



#CONNECTING WITH GOOGLE SHEETS

scope = ["https://spreadsheets.google.com/feeds",'https://www.googleapis.com/auth/spreadsheets',"https://www.googleapis.com/auth/drive.file","https://www.googleapis.com/auth/drive"]

creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)

client = gspread.authorize(creds)

workbook = client.open_by_url('https://docs.google.com/spreadsheets/d/1j-70U9OT4ZMLUF-VQjhEiXTaCi8z5w0VGOnHahutcfY/edit#gid=2024795337')

sheet = workbook.worksheet('NEW MRQ')





# define path to chrome driver

chrome_driver = os.path.abspath('C:/Users/ross/Desktop/chromedriver.exe')

browser = webdriver.Chrome(chrome_driver)





#opens web page, sets the max number of divs we'll have to search through below and clicks any tabs to open the entire web page

def web_info(fin_stmt, ticker):

    global div_max

    #div_max to be used in function 'find_row'



    browser.get("https://www.wsj.com/market-data/quotes/" + str(ticker) + "/financials/annual/" + str(fin_stmt))

    WebDriverWait(browser, 60).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#cr_cashflow > div.mod_tools.right > ul > li:nth-child(1) > a'))).click()



    if fin_stmt == 'income-statement':

        div_max = 3





    elif fin_stmt == 'balance-sheet':

        div_max = 4

        WebDriverWait(browser, 60).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#cr_cashflow > div:nth-child(3) > div.cr_cashflow_strap > h2'))).click()





    elif fin_stmt == 'cash-flow':

        div_max = 5

        WebDriverWait(browser, 60).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#cr_cashflow > div:nth-child(3) > div.cr_cashflow_strap > h2'))).click()

        WebDriverWait(browser, 120).until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#cr_cashflow > div:nth-child(4) > div.cr_cashflow_strap > h2'))).click()

    return div_max



# FIND COLUMN

def find_column(quarter):



    #finds all year values

    if quarter == 'Most Recent Quarter':
        col_num = 1
    elif quarter == 'Most Recent Quarter + 1':
        col_num = 2
    elif quarter == 'Most Recent Quarter + 2':
        col_num = 3
    elif quarter == 'Most Recent Quarter + 3':
        col_num = 4
    elif quarter == 'This Quarter Last Year':
        col_num = 5
    return col_num




#FIND VALUE

def find_value(account, col_num):


    global div
    #divs on each financial statement's web page start at 2 and can only go up to whatever their 'div_max' is

    div = 2

    while div < div_max:

        account_data = WebDriverWait(browser, 60).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR,'#cr_cashflow div:nth-child(' + str(div) + ') div.cr_cashflow_table table tbody tr td[class]:nth-child(1)')))

        # account_data = browser.find_elements_by_css_selector('#cr_cashflow div:nth-child(' + str(div) + ') div.cr_cashflow_table table tbody tr td[class]:nth-child(1)')

        for x, row in enumerate(account_data):

            if row.text == account:

                row_num = x

                value = browser.find_element_by_css_selector('#cr_cashflow div:nth-child(' + str(div) + ') div.cr_cashflow_table table tbody tr:nth-child(' + str(row_num + 1) + ') td[class]:nth-child(' + str(col_num + 1) + ')')

                return value.text, div

        #for each account in 'account_data', if row.text equals the entered account then remember the row number and use it to get value



        div += 1





#the length of 'years' and 'tickers' gets the dimensions of our table on the g sheet.

#This is used to figure out the dimensions of where the user wants the information inputted into the google sheet.

years_array = sheet.row_values(2)[2:100]

tickers_array = sheet.col_values(1)[3:100]

years_count = len(years_array)

tickers_count = len(tickers_array)

percentage_labels = ['Current Ratio', 'Quick Ratio', 'EPS (Basic)']



#information_array holds each column that has been entered on the google sheet (each column on the g sheet should include the financial statement, year, account)

information_array = []

for i in range(3, 3 + years_count):

    information_array.append(sheet.col_values(i)[0:3])


def get_units():
    find_labels = browser.find_element_by_css_selector('#cr_cashflow > div.expanded > div > table > thead > tr > th.fiscalYr')
    # cr_cashflow > div.expanded > div > table > thead > tr > th.fiscalYr
    units = str(find_labels.text)

    if 'Thousands' in units:
        unit_multiplier = 1000
    elif 'Millions' in units:
        unit_multiplier = 1000000


    return unit_multiplier
#cr_cashflow > div.expanded > div > table > thead > tr > th.fiscalYr

#full_array is one array holding many arrays (holds each ticker_array)

full_array = []

for ticker in tickers_array:

    #ticker_array holds all values for each ticker and then gets added to 'full_array' and 'ticker_array' is erased

    ticker_array = []

    last_fin_stmt = []

    #for each 'info' column returned from the g sheet, try to run each step of the code and if it works move on to next step. if it doesn't work then append array

    #with error message and start at the beginning of the for loop with the next item in the list

    #Each 'info' column contains financial statement, account, and year

    for info in information_array:

        if info[0] == last_fin_stmt:

            try:

                column = find_column(info[1])

            except:

                ticker_array.append("Find Column could not be completed!")

                continue

            try:

                value = find_value(info[2], column)[0]

            except:

                ticker_array.append("Find Value could not be completed!")

                continue


            if info[2] in percentage_labels:
                ticker_array.append(value)
                continue

            if value[0] == '(':
                no_parenthesis = value.replace('(','').replace(')','')
                unit_val = get_units() * float(no_parenthesis.replace(',',''))
                add_parenthesis = '(' + str(unit_val) + ')'
                ticker_array.append(add_parenthesis)

            else:
                unit_val = get_units() * float(value.replace(',', ''))
                ticker_array.append(unit_val)







        else:

            try:

                web_info(info[0], ticker)

            except:

                ticker_array.append("Web Info could not be completed!")

                continue


            try:

                column = find_column(info[1])

            except:

                ticker_array.append("Find Column could not be completed!")

                continue

            try:

                value = find_value(info[2], column)[0]

            except:

                ticker_array.append("Find Value could not be completed!")

                continue

            last_fin_stmt = info[0]

            if info[2] in percentage_labels:
                ticker_array.append(value)
                continue

            if value[0] == '(':
                no_parenthesis = value.replace('(','').replace(')','')
                unit_val = get_units() * float(no_parenthesis.replace(',',''))
                add_parenthesis = '(' + str(unit_val) + ')'
                ticker_array.append(add_parenthesis)

            else:
                unit_val = get_units() * float(value.replace(',', ''))
                ticker_array.append(unit_val)



        #all information for one ticker is held in this array and then appended to the larger full_array which is below. Then ticker_array is reset back to containing nothing.





    #once the entirety of information_array has been iterated through then append it to full_array and move on to the next ticker value

    full_array.append(ticker_array)



#creates dictionary to convert number to letter (1 to A, 2 to B, etc.)

num_to_letter_dict = dict(enumerate(string.ascii_uppercase, 1))





#full_array is inputted into area of g sheet decided by dimension of 'years_count' and 'tickers_count'

sheet.update("C4:" + str(num_to_letter_dict[2 + years_count]) + str(3 + tickers_count), full_array)

print(datetime.now() - startTime)
